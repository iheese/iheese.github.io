I"J<h2 id="servlet">Servlet</h2>
<ul>
  <li>기존의 존재하던 웹 서버(Web Server)는 정적 페이지만 처리하였다.</li>
  <li>동적인 페이지를 처리하기 위해 나온 것이 Java의 Servlet이다.</li>
</ul>

<p><img src="/img/posts/javaetc/servlet.png" alt="servlet" /></p>

<ul>
  <li>위 그림에서 Web Contatiner가 Servlet Container와 같다.</li>
  <li>클라이언트 측(브라우저)에서 들어온 요청이 정적 페이지이면 바로 웹 서버에서 처리하여 빠르게 응답할 수 있다.</li>
  <li>클라이언트 측에서 들어온 요청이 동적 페이지면 웹 서버는 forwarding 하여 Servlet Container에 넘기고 어떤 로직을 처리하고 웹 서버를 통해 응답한다.</li>
  <li><a href="https://iheese.github.io/java/2022/01/27/servlet/">참고!! : Servlet의 작성방법, 생명주기, Request, Response에 관하여 </a></li>
</ul>

<p><br /></p>

<h3 id="spring은-servlet과-어떤-연관이-있을까">Spring은 Servlet과 어떤 연관이 있을까?</h3>

<ul>
  <li>Servlet은 Servlet Container에 의해 생성, 메소드 호출, 소멸까지 자동으로 처리된다.</li>
  <li>각 동적 페이지 요청에 따라 Servlet이 각각 생성되어야 하며 개별 Servlet 로직 외에도 공통 로직을 포함하게 되므로 반복적인 일이 일어나게 된다.</li>
  <li>또한 Servlet Container는 메소드 호출하면서 쓰레드를 할당하게 되는데 이 자체 과정이 반복되게 되면 서버에 큰 부담이 된다.</li>
  <li>이를 개선하기 위해 Spring MVC에서는 DispatcherServlet을 사용하게 된다.</li>
</ul>

<p><br /></p>

<h3 id="spring-mvc-dispatcherservlet">Spring MVC, DispatcherServlet</h3>

<ul>
  <li>Spring MVC는 Front controller 패턴을 이용하여 구성되어 있다.</li>
  <li>Front controller는 클라이언트로부터 모든 요청을 받는 전면 컨트롤러이다.</li>
  <li>Spring MVC에서는 Front controller를 DispatcherServlet로 사용한다.
    <blockquote>
      <ul>
        <li>Spring MVC :  Spring이 제공하는 웹 모듈이며, M,V,C 로 나누어 제공한다.
          <blockquote>
            <ul>
              <li>M : Model, 데이터</li>
              <li>V : View, 실제로 만들어지는 페이지</li>
              <li>C : Controller, 요청에 따른 응답을 만드는 로직</li>
            </ul>
          </blockquote>
        </li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><img src="/img/posts/javaetc/mvc.png" alt="servlet" /></p>

<ul>
  <li>각 순서에 맞는 부연 설명
    <ol>
      <li>클라이언트로부터 HTTP 요청이 들어온다.</li>
      <li>Handler Mappping의 방식을 통해 요청에 맞는 컨트롤러가 리턴된다.</li>
      <li>Handler Adapter는 요청에 맞는 컨트롤러가 처리 로직을 수행한다.</li>
      <li>그 후 처리 결과를 Model&amp;View 형태로 변환하여 DispatcherServlet으로 보낸다.</li>
      <li>DispatcherServlet은 리턴받은 값을 View Resolver를 통해 view 객체를 찾아주거나 생성한다.</li>
      <li>그리고 view 객체에 model(로직 결과 data)를 포함시켜 응답하게 된다.</li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h2 id="servlet에서-spring-mvc로">Servlet에서 Spring MVC로</h2>
<ul>
  <li>설정만 잘 해주면 Spring MVC에서 제공하는 DispatcherServlet과 웹 요청, 응답 객체를 Servlet Container에 의해 쉽게 관리하고 처리할 수 있게 된다.</li>
  <li>
    <p>또한 Spring Container를 통해 Java 객체 관리가 쉬워질 수 있게 된다.</p>
  </li>
  <li>
    <h4 id="이는-결국-controller-로직요청처리-로직에-개발자가-집중할-수-있는-환경을-만들게-된다">이는 결국 Controller 로직(요청처리 로직)에 개발자가 집중할 수 있는 환경을 만들게 된다.</h4>
  </li>
</ul>

<p><br /></p>

<p>Reference:</p>
<ul>
  <li><a href="https://www.crebugs.com/product/view.php?idx=7382&amp;code=1412">java img_크레벅스</a></li>
  <li><a href="https://gap85.tistory.com/45">web server and web container img</a></li>
  <li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=kbh3983&amp;logNo=220777162751">18. Spring MVC 흐름 - DispatcherServlet, Front Controller _ 뽕</a></li>
  <li><a href="https://velog.io/@miscaminos/Spring-MVC-framework">Spring MVC framework img _miscaminos</a></li>
  <li><a href="https://ecsimsw.tistory.com/entry/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9C%BC%EB%A1%9C-%EC%84%9C%EB%B8%94%EB%A6%BF%EC%9D%84-%EB%8B%A4%EB%A3%AC%EB%8B%A4%EB%8A%94-%EA%B2%83">스프링으로 서블릿을 다룬다는 것_ecsimsw</a></li>
</ul>
:ET