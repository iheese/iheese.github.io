I"<J<h2 id="object-객체">Object (객체)</h2>
<ul>
  <li>구체적, 추상적 데이터의 단위, 의사나 행위가 미치는 대상</li>
</ul>

<h2 id="oop-object-oriented-programming-객체-지향-프로그래밍">OOP (Object Oriented Programming, 객체 지향 프로그래밍)</h2>
<ul>
  <li>객체를 정의한다.</li>
  <li>객체가 제공하는 기능을 구현한다.</li>
  <li>각 객체가 제공하는 기능 간의 소통을 통해 협력을 구현한다.</li>
</ul>

<p><br /></p>
<h2 id="class-클래스">Class (클래스)</h2>
<ul>
  <li>객체를 코드로 나타낸 것을 의미한다.</li>
  <li>예시</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">char</span> <span class="n">sex</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">personHeight</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">personWeight</span><span class="o">;</span>  <span class="c1">//멤버 변수 : 객체 내 명사적 역할</span>
    
    <span class="nc">Person</span><span class="o">(){}</span> <span class="c1">//생성자 메소드: 초기화 역할</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printInfo</span><span class="o">(){</span>
    	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">"님은 "</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">"살 입니다."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printBodyInfo</span><span class="o">(){</span>
    	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">"님의 "</span> <span class="o">+</span> <span class="s">"몸무게는 "</span> <span class="o">+</span> <span class="n">personWeight</span> <span class="o">+</span> <span class="s">"kg, 키는 "</span> <span class="o">+</span> <span class="n">personHeight</span> <span class="o">+</span> <span class="s">"cm 입니다."</span><span class="o">);</span>
    <span class="o">}</span>  <span class="c1">//일반 메소드 : 객체 내 동사적 역할</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <ul>
    <li>클래스의 구성
      <blockquote>
        <ul>
          <li>멤버 변수
            <blockquote>
              <ul>
                <li>객체의 명사적 기능, 객체 내에 사용되는 변수, 객체 속성</li>
                <li>객체에 유일하게 저장되는 요소, 생성자 메소드와 일반 메소드는 저장되지 않는다.</li>
              </ul>
            </blockquote>
          </li>
          <li>생성자 메소드
            <blockquote>
              <ul>
                <li>멤버 변수의 초기화 역할</li>
                <li>클래스로부터 객체(인스턴스) 생성할 때 호출된다.</li>
              </ul>
            </blockquote>
          </li>
          <li>일반 메소드
            <blockquote>
              <ul>
                <li>객체의 동사적 기능, 멤버 변수를 이용한 함수의 기능</li>
                <li>객체가 제공하는 기능적 요소</li>
              </ul>
            </blockquote>
          </li>
        </ul>
      </blockquote>
    </li>
  </ul>
</blockquote>

<p><br /></p>
<h2 id="instance인스턴스">instance(인스턴스)</h2>
<ul>
  <li>클래스는 추상화된 객체이다. 객체에 다양한 값을 넣어 사용하기 위해 인스턴스가 필요하다.</li>
  <li>Ex) Person 이라는 클래스의 틀을 만들어놓고, 인스턴스를 통해 “Lee”라는 사람, “kim” 이라는 사람을 만들어 사용하는 것이다.</li>
  <li>인스턴스를 생성할 때는 new 연산자를 이용한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonTest</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="nc">Person</span> <span class="n">personLee</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">();</span> <span class="c1">//인스턴스 생성</span>
		<span class="n">personLee</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"이길동"</span><span class="o">;</span>
		<span class="n">personLee</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="mi">25</span><span class="o">;</span>   <span class="c1">//멤버변수 설정</span>
		
		
		<span class="n">personLee</span><span class="o">.</span><span class="na">printInfo</span><span class="o">();</span> <span class="c1">//일반 메소드 호출</span>
		
		<span class="nc">Person</span> <span class="n">personKim</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">();</span> <span class="c1">//인스턴스 생성</span>
		<span class="n">personKim</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"김장군"</span><span class="o">;</span>
		<span class="n">personKim</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="mi">55</span><span class="o">;</span>   <span class="c1">//멤버변수 설정</span>
		
		
		<span class="n">personKim</span><span class="o">.</span><span class="na">printInfo</span><span class="o">();</span> <span class="c1">//일반 메소드 호출</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">personLee</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">personKim</span><span class="o">);</span> 
        <span class="c1">// 인스턴스를 출력하면 해당 메모리 주소가 나온다.</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>생성된 인스턴스는 동적 메모리(heap memory)에 저장된다.</li>
  <li>자바에서는 사용하지 않는 동적 메모리를 주기적으로 수거한다.</li>
  <li>각각의 인스턴스에는 각각의 동적 메모리의 주소가 저장된다.</li>
  <li>즉 클래스를 기반으로 인스턴스가 생성된다. &gt; heap 영역에 인스턴스의 멤버 변수 값들이 저장된다. &gt; 인스턴스 자체에서는 heap 영역과 연결된 주소값을 저장된다. (이를 ‘참조변수’ 라 한다. )</li>
</ul>

<p><br /></p>

<h2 id="constructor생성자">constructor(생성자)</h2>
<ul>
  <li>멤버 변수의 초기화를 위해 사용된다.</li>
  <li>인스턴스를 생성하는 new 연산자와 사용될 때 호출된다.</li>
  <li>생성자는 클래스의 이름과 동일하게 구현하면 된다. (클래스 이름과 마찬가지로 보통 대문자 시작)</li>
  <li>void (X), 생성자는 리턴 타입이 없다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 	<span class="nc">Person</span><span class="o">(){}</span> <span class="c1">//기본 생성자 메소드, 아무 매개변수를 가지고 있지 않다.</span>

</code></pre></div></div>

<ul>
  <li>생성자를 생성하지 않으면 컴파일러가 기본 생성자 메소드를 생성해준다.</li>
  <li>String: null, char: ‘\u0000’ , int,byte,short: 0 ,long: 0L, double: 0.0, float: 0.0F, boolean: false, Stirng, 배열, 인스턴스: null 로 초기화된다.</li>
</ul>

<h4 id="초기화는-왜-필요하지">초기화는 왜 필요하지?</h4>
<ul>
  <li>자바에서 변수를 생성할 때를 생각해보자</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 
 <span class="kt">int</span> <span class="n">num1</span><span class="o">;</span> <span class="c1">//선언만 했다. </span>
 <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">num1</span><span class="o">);</span>  <span class="c1">//초기화가 필요하다고 오류가 뜬다. </span>
 
 <span class="kt">int</span> <span class="n">num2</span><span class="o">=</span><span class="mi">15</span><span class="o">;</span> <span class="c1">//선언과 초기화를 동시에 한 경우</span>
 <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">num2</span><span class="o">);</span> <span class="c1">//15  잘 나온다.</span>
 
</code></pre></div></div>

<ul>
  <li>선언은 어떤 값을 저장하는 공간을 확보하겠다는 것을 의미한다.</li>
  <li>위 코드를 실행하면 변수가 선언은 되었지만 초기화가 필요하다고 오류가 뜬다.</li>
  <li>어떤 변수와 타입을 선언했으면 그에 맞는 값을 넣어줘야 하는데 엉뚱한 타입의 값을 넣는 것을 방지하기 위해 처음에 타입에 맞는 값을 넣어주는 과정(초기화)이 필요한 것이다.</li>
</ul>

<h3 id="생성자가-왜-필요하지">생성자가 왜 필요하지?</h3>
<ul>
  <li>어떤 클래스를 기반으로 만든 인스턴스의 멤버 변수가 초기화가 되지 않고 선언만 되었다.</li>
  <li>인스턴스를 사용하면서 멤버 변수에 어떤 값이 할당되어 초기화될지 예측할 수 없다.</li>
  <li>이를 막기 위해 생성자를 통해 멤버 변수를 초기화하여 변수 타입에 맞는 값을 미리 넣어주는 것이다.</li>
</ul>

<p><br /></p>
<h2 id="매개-변수를-포함한-일반-생성자-메소드">매개 변수를 포함한 일반 생성자 메소드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> <span class="c1">//멤버 변수 선언</span>
	
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span> <span class="c1">//매개변수 age, name 포함</span>
    	<span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span>  <span class="n">age</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span> 
        <span class="c1">//매개변수 age, name이 this.age, this.name으로 멤버 변수를 가리키고 있다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonTest</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="c1">//Person personLee = new Person();</span>
        <span class="c1">//personLee.age=22;</span>
        <span class="c1">//personLee.name="이길동";</span>
		<span class="c1">//기본 생성자 메소드로 초기화된 것</span>
        
		<span class="nc">Person</span> <span class="n">personLee</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">22</span><span class="o">,</span> <span class="s">"이길동"</span><span class="o">);</span>
        <span class="c1">//매개변수를 이용한 생성자</span>

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>this를 이용해 멤버변수를 가리킬 수 있다.</li>
  <li>코드를 간결하게 만들 수 있다.</li>
  <li>멤버변수의 값을 원하는 값으로 초기화할 수 있다.</li>
  <li>private으로 클래스의 멤버 변수를 설정하면 초기값 설정을 강제할 수 있다.</li>
</ul>

<p><br /></p>
<h3 id="생성자-overloading오버로딩">생성자 overloading(오버로딩)</h3>
<ul>
  <li>여러 가지 생성자를 정의하는 것을 의미한다.</li>
  <li>생성자를 따로 구현하게 되면 기본 생성자 메소드는 제공되지 않는다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> 
	
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(){}</span> <span class="c1">//기본 생성자</span>
    
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
   		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>  <span class="c1">//이름 매개변수만 있는 생성자</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span> 
    	<span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span>  <span class="n">age</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>  <span class="c1">//나이와 이름 매개변수가 있는 생성자</span>
        
   <span class="o">}</span>
    
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printInfo</span><span class="o">()</span> <span class="o">{</span>
	   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="s">"이름:"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"나이: "</span> <span class="o">+</span>  <span class="n">age</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonTest</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="nc">Person</span> <span class="n">personLee1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">();</span>
        <span class="c1">//기본 생성자로 생성</span>
		<span class="nc">Person</span> <span class="n">personLee2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"이길동"</span><span class="o">);</span>
        <span class="c1">//이름 매개변수만 있는 생성자로 생성</span>
		<span class="nc">Person</span> <span class="n">personLee3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">22</span><span class="o">,</span> <span class="s">"이길동"</span><span class="o">);</span>
        <span class="c1">//나이, 이름 매개변수가 있는 생성자로 생성</span>
        
        <span class="n">personLee1</span><span class="o">.</span><span class="na">printInfo</span><span class="o">();</span> <span class="c1">//이름: null 나이: 0</span>
		<span class="n">personLee2</span><span class="o">.</span><span class="na">printInfo</span><span class="o">();</span> <span class="c1">//이름: 이길동 나이: 0</span>
		<span class="n">personLee3</span><span class="o">.</span><span class="na">printInfo</span><span class="o">();</span> <span class="c1">//이름: 이길동 나이: 22</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>여러 생성자 중 호출하는 사람의 필요에 의해 사용될 수 있다.</li>
  <li>매개변수의 타입과 갯수가 같다면 오버로딩이라 할 수 없다.</li>
</ul>

<p><br />
Reference:</p>
<ul>
  <li>백엔드 개발 필수_패스트캠퍼스를 학습하고 정리한 내용입니다.</li>
  <li><a href="https://colossus-java-practice.tistory.com/7">참조형 변수_거신cms</a></li>
  <li><a href="http://www.tcpschool.com/java/java_methodConstructor_constructor">생성자_TCP</a></li>
  <li><a href="https://www.crebugs.com/product/view.php?idx=7382&amp;code=1412">java img_크레벅스</a></li>
</ul>
:ET