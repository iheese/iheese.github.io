I" <ul>
  <li>모든 실습은 IntellJ 에서 진행되었습니다.</li>
  <li>진행했던 프로젝트의 코드를 기반으로 예시를 작성하여 다를 수 있습니다.</li>
</ul>

<p><br /></p>

<ul>
  <li>프로젝트를 진행하면서 테이블을 만들 때 많이 고민했던 부분이 필드의 타입이었다. 연관된 상수들, 즉 어떤 집합 중 하나에 속하는 경우가 굉장히 많았다.(예시: 나이대(10대, 20대, 30대, …), 직업(공무원, 학생, 무직, …))</li>
  <li>String 타입으로 받게 되면 정해진 값이 아닌 다른 값이 들어와도 모르는 단점이 있고, 프론트엔드와 백엔드가 협업할 때 바뀌는 값을 정확하게 매번 업데이트해주지 않으면 문제가 생길 수 있다.
    <blockquote>
      <ul>
        <li>정해진 값으로 DB에 넣어줘야 조회할 때도 정해진 값으로 조회가 될텐데 값이 달라지면 조회가 안되게 된다.</li>
      </ul>
    </blockquote>
  </li>
  <li>고정된 상수의 열거형인 Enum으로 만들어 정해진 값으로 받으면 문제가 해결될 수 있고 IDE의 도움도 받을 수 있게 된다.</li>
</ul>

<p><br /></p>

<h2 id="enum">ENUM</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">JobStatus</span> <span class="n">jobStatus</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">JobStatus</span> <span class="o">{</span>
        <span class="no">STUDENT</span><span class="o">,</span>
        <span class="no">EMPLOYED</span><span class="o">,</span>
        <span class="no">NOTEMPLOYED</span>
    <span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>Entity 클래스 안에 Enum 클래스를 만들 수도 있고, 따로 클래스로 빼서 만들기도 한다.</li>
  <li>STUDENT, EMPLOYED, NOTEMPLOYED 직업 상태에 대한 상수의 열거형이며 타입으로 선언할 수 있다.</li>
</ul>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">JobStatus</span> <span class="o">{</span>
        <span class="no">STUDENT</span><span class="o">(</span><span class="s">"학생"</span><span class="o">,</span> <span class="s">"student"</span><span class="o">),</span>
        <span class="no">EMPLOYED</span><span class="o">(</span><span class="s">"취업성공"</span><span class="o">,</span> <span class="s">"employed"</span><span class="o">),</span>
        <span class="no">NOTEMPLOYED</span><span class="o">(</span><span class="s">"취업준비"</span><span class="o">,</span> <span class="s">"notemployed"</span><span class="o">);</span>

        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">koreanName</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">lowerCase</span><span class="o">;</span>

      <span class="c1">//JobStatus(String koreanName, String lowerCase){</span>
      <span class="c1">//      this.koreanName=koreanName;</span>
      <span class="c1">//	  this.lowerCase=lowerCase;</span>
      <span class="c1">//} 생략가능!</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>필드를 추가해 상수와 관련된 값들을 묶을 수 있으며, 필드 선언 순서에 따라 해당 필드값을 가리킨다. (“학생” -&gt; koreanName, “lowerCase” -&gt; “student”)</li>
  <li>필드를 추가하면 생성자를 생성해주어야 하며, lombok의 @RequiredArgsConstructor를 이용하면 생략이 가능하다.</li>
</ul>

<p><br /></p>

<h4 id="jsonformat-jsonvalue">@JsonFormat, @JsonValue</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@JsonFormat</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">JobStatus</span> <span class="o">{</span>
        <span class="no">STUDENT</span><span class="o">(</span><span class="s">"학생"</span><span class="o">),</span>
        <span class="no">EMPLOYED</span><span class="o">(</span><span class="s">"취업성공"</span><span class="o">),</span>
        <span class="no">NOTEMPLOYED</span><span class="o">(</span><span class="s">"취업준비"</span><span class="o">);</span>

		<span class="nd">@JsonValue</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">koreanName</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>@JsonFormat은 속성값을 직렬화하는 방법에 대한 세부 정보를 구성하는 데 사용되는 범용 주석이다.</li>
  <li>직렬화하는 것에 대한 타입을 정할 수 있다. 아래 말고도 많은 타입을 정해줄 수 있다.
    <blockquote>
      <ul>
        <li><code class="language-plaintext highlighter-rouge">shape = JsonFormat.Shape.OBJECT</code></li>
        <li><code class="language-plaintext highlighter-rouge">shape = JsonFormat.Shape.STRING</code></li>
        <li><code class="language-plaintext highlighter-rouge">shape = JsonFormat.Shape.NUMBER</code></li>
      </ul>
    </blockquote>
  </li>
  <li>원래 아무 표시도 해주지 않으면 enum의 직렬화 결과는 상수의 이름이지만 @JsonFormat, @JsonValue으로 정해주면 @JsonValue로 정해준 필드로 직렬화가 된다.</li>
  <li>예시: 위처럼 Enum을 만들면 입력받을 때도 “학생” 으로 받게 되고, 출력될 때도 “학생”으로 출력되게 된다. 그러나 DB 상에는 상수값인 STUDENT 로 저장된다.</li>
</ul>

<p><br /></p>

<h3 id="enum에-메소드-추가">ENUM에 메소드 추가</h3>

<ul>
  <li>위 방법은 편리하지만 치명적인 단점이 있다. 상수값으로 ENUM을 조회하면 직렬화되기 때문에 찾지 못한다. (koreanName 값으로 조회해야 한다.) 그 대안으로 사용했던 방법을 기록한다.</li>
</ul>

<pre><code class="language-JAVA">@Getter
@JsonFormat
@RequiredArgsConstructor
public enum JobStatus {
        STUDENT("학생"),
        EMPLOYED("취업성공"),
        NOTEMPLOYED("취업준비");
        EMPTY("빈값");

		@JsonValue
        private final String koreanName;
        
        public static JobStatus findByJobStatus(String input){
        	return
                Arrays.stream(JobStatus.values())
                        .filter(jobStatus -&gt; jobStatus.getKoreanName().equals(input))
                        .findAny()
                        .orElse(EMPTY);
    }
}
</code></pre>

<ul>
  <li>ENUM의 values() 메소드는 Enum 상수들을 선언한 순서대로 Array 배열로 리턴해준다.</li>
  <li>상수의 한국말과 입력 받은 input 값을 비교해 일치하면 해당 상수를 리턴하고 없으면 EMPTY 상수를 리턴한다.</li>
  <li>DB에는 상수로 저장되어 있으므로 위 메소드를 통해 조회하여 해당 객체를 조회할 수 있다.</li>
</ul>

<p><br /></p>

<p>Reference:</p>

:ET