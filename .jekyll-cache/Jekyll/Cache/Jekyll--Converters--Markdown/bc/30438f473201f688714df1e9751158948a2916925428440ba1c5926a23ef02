I"2<ul>
  <li>모든 실습은 Eclipse Spring Tool Suite 4 에서 진행되었습니다.</li>
</ul>

<p><br /></p>

<h3 id="spring-security">Spring Security</h3>
<ul>
  <li>Spring 기반의 어플리케이션 보안(인증과 인가)을 담당하는 프레임워크이다.
    <blockquote>
      <ul>
        <li>인증(Authentication) : 식별 가능한 정보로 등록된 유저의 신원을 입증하는 과정을 의미한다.</li>
        <li>인가(Authorization) : 인증된 사용자에 대한 자원 접근 권한을 확인한다.
          <blockquote>
            <ul>
              <li>Ex) 많은 회사가 모여 있는 건물에 들어갈 때 사원증이 필요하다.</li>
              <li>사원증을 이용해 회사 건물에 들어가는 것을 인증,</li>
              <li>건물 내 많은 회사 중 나의 회사 층만 들어갈 수 있는 것은 인가이다.</li>
            </ul>
          </blockquote>
        </li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h3 id="spring-security-사용하기">Spring Security 사용하기</h3>

<ul>
  <li>Maven을 사용한다면 pom.xml에 아래와 같은 의존성을 추가해줘야 한다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ul>
  <li>Gradle을 사용한다면 build.gradle에 아래와 같은 의존성을 추가해줘야 한다.</li>
</ul>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-security'</span>
<span class="n">implementation</span> <span class="s1">'org.springframework.security:spring-security-test'</span>
</code></pre></div></div>

<ul>
  <li>의존성만 추가해도 Spring Security 기본 설정들이 적용되며, 어플리케이션 실행시 user라는 객체가 생성되어 Spring Security가 제공하는 기본 로그인 화면이 나오게 된다.</li>
  <li>기본 아이디는 <code class="language-plaintext highlighter-rouge">user</code>이며, 비밀번호는 콘솔창에 Using generated security password 에 나오게 된다.</li>
</ul>

<p><br /></p>

<h3 id="spring-security-순서">Spring Security 순서</h3>

<p><img src="/img/posts/spring/springsecurity.png" alt="springsecurity" width="800" /></p>

<ul>
  <li>Http 요청이 들어오면 AuthenticationFilter를 거쳐 UsernamePasswordToken을 발급해준다.</li>
  <li>AuthenticationManager는 UsernamePasswordToken 인증을 처리할 AuthenticationProvider 여러 개를 가지고 있다.</li>
  <li>AuthenticationProvider을 통해 UsernamePasswordToken의 아이디를 조회하고 UserDetailsService에 아이디를 기반으로 데이터를 조회한다.
    <blockquote>
      <ul>
        <li>UserDetails는 인터페이스고 일반 UserVO 객체에 인가 권한이 추가된 객체이다.</li>
      </ul>
    </blockquote>
  </li>
  <li>UserDetailsService은 데이터를 리턴해주고, AuthenticationProvider에서 조회한 데이터와 입력받은 비밀번호가 일치하는지 확인하고 일치하면 인증된 토큰을 생성하여 반환해준다.</li>
  <li>AuthenticationFilter에게 인증된 토큰이 리턴되고 LoginSuccessHandler로 전달된다.</li>
  <li>LoginSuccessHandler는 SecurityContextHolder에 저장하면 인증 과정이 끝난다.
    <blockquote>
      <ul>
        <li>로그인 성공 후 세션을 이용해 로그인 반복을 줄인다.</li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h3 id="spring-security-커스텀하기">Spring Security 커스텀하기</h3>

<ul>
  <li>Spring Security에 집중된 실습을 위해 Repository, Service 단은 고려하지 않았고 일반적으로 Controller - Service - Repository - DB 로 연결되어 있다고 이해해주시면 됩니다.
    <blockquote>
      <ul>
        <li>각자 JPA, MyBatis, JDBC 등을 이용하여 구현하면 됩니다.</li>
        <li><a href="https://spring.io/guides/gs/securing-web/">spring security guide</a> 를 참고하여 실습해봐도 좋을 것 같습니다.</li>
      </ul>
    </blockquote>
  </li>
  <li>실습 큰 틀은 Controller(사용자 요청, 화면 이동 처리) + WebSecurityConfig(사용자 요청에 대한 security 처리, 화면 연결 설정 등등) + UserDetailsService로부터 AuthenticationManagerBuilder을 통해 인증 객체 연결
    <blockquote>
      <ul>
        <li>AuthenticationManagerBuilder는 AuthenticationProviders를 쉽게 추가할 수 있도록 인증 메커니즘을 설정하는데 사용됩니다.</li>
      </ul>
    </blockquote>
  </li>
  <li>UserDetailsService(인터페이스, Repository로부터 일반 객체를 받고 UserDetails 객체를 리턴해준다. )</li>
  <li>UserDetails 객체(인터페이스, 일반 객체를 받아 권한 설정을 더해준다.)</li>
  <li>User(일반 VO객체)</li>
</ul>

<p><br /></p>

<ul>
  <li>먼저 로그인, 회원가입 하는 Controller를 만들어본다.</li>
</ul>

<p>AuthController.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthController</span> <span class="o">{</span>

	<span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>
	
	<span class="c1">// 로그인 화면으로 이동</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/login"</span><span class="o">)</span> 
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">login</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"views/login"</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">// 회원가입 화면으로 이동</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/insertUser"</span><span class="o">)</span> 
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">insertUser</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"views/insertUser"</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">// 회원 가입 처리</span>
	<span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"insertUser"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">String</span> <span class="nf">insertUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// username으로 등록된 회원이 있나 검색한다. </span>
		<span class="nc">User</span> <span class="n">findUser</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">findUser</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">user</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">);</span>
			<span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
			<span class="k">return</span> <span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 회원 가입 성공"</span><span class="o">;</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 아이디는 이미 존재합니다"</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>
<ul>
  <li>Spring Security 커스텀을 위해서는 환경설정 파일을 통해 설정을 재정의해줘야 한다.</li>
</ul>

<p>WebSecurityConfig.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span> <span class="c1">//설정 클래스</span>
<span class="nd">@EnableWebSecurity</span> <span class="c1">//Spring Security 커스텀에 필수적인 Annotation</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="nc">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
	
    <span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="nc">UserDetailsServiceImpl</span> <span class="n">userDetailsService</span><span class="o">;</span>
    
	
	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="n">auth</span><span class="o">.</span><span class="na">userDetailsService</span><span class="o">(</span><span class="n">userDetailsService</span><span class="o">);</span>
	<span class="o">}</span>
    
    <span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="n">http</span>
			<span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
				<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/"</span><span class="o">,</span> <span class="s">"/home"</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
				<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
				<span class="o">.</span><span class="na">and</span><span class="o">()</span>
			<span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
				<span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">"/login"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">permitAll</span><span class="o">()</span>
				<span class="o">.</span><span class="na">and</span><span class="o">()</span>
			<span class="o">.</span><span class="na">logout</span><span class="o">()</span>
				<span class="o">.</span><span class="na">permitAll</span><span class="o">();</span>
	<span class="o">}</span>
</code></pre></div></div>

<p><br />
Reference:</p>
<ul>
  <li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew">inflean_img</a></li>
  <li><a href="https://mangkyu.tistory.com/76">[SpringBoot] Spring Security란?</a></li>
  <li><a href="https://mangkyu.tistory.com/77">[SpringBoot] Spring Security 처리 과정 및 구현 예제}</a></li>
  <li><a href="https://www.youtube.com/watch?v=fG21HKnYt6g">스프링 시큐리티 이것부터 고쳐 쓰세요_백기선</a></li>
</ul>
:ET