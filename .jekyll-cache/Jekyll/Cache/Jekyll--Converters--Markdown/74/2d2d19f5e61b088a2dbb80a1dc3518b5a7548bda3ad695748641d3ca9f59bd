I"_a<ul>
  <li>모든 실습은 Eclipse Spring Tool Suite 4 에서 진행되었습니다.</li>
</ul>

<p><br /></p>

<h3 id="ormobject-relational-mapping">ORM(Object Relational Mapping)</h3>
<ul>
  <li>객체 관계 매핑을 의미한다.</li>
  <li>관계형 데이터베이스와 Java 객체를 연결해주는 역할을 한다.</li>
</ul>

<h3 id="jpajava-persistence-api">JPA(Java Persistence API)</h3>

<p><img src="/img/posts/spring/jpa.png" alt="jpa" />{align=”left”}</p>

<ul>
  <li>Java의 ORM의 기술 표준을 JPA라 한다.</li>
  <li>인터페이스로 구성되어 있으며, 인터페이스의 구현체가 Hibernate, EcipseLink, DataNucleus이다.</li>
  <li>이 포스트에서는 Hibernate를 사용할 것이고, Spring Boot는 Hibernate를 기본 JPA 구현체로 사용한다.</li>
</ul>

<p><br /></p>

<h3 id="jpa-설정applicationyml">JPA 설정(application.yml)</h3>
<ul>
  <li>빌드툴이 Maven이라면 pom.xml에 아래와 같은 의존성을 추가해준다.</li>
  <li>Spring Starter Project를 이용해 프로젝트를 만든다면 Spring Data JPA를 추가하면 된다.</li>
  <li>버전은 각 상황에 맞게 달리 적용해주면 된다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>2.7.1<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ul>
  <li>빌드툴이 Gradle이라면 build.gradle에 아래와 같은 의존성을 추가해준다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.7.1'

</code></pre></div></div>

<p><br /></p>

<h4 id="applicationyml-설정">application.yml 설정</h4>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># datasource 설정</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">org.h2.Driver</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:h2:tcp://localhost/~/test</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">username</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">password</span>

<span class="c1"># JPA 설정</span>
  <span class="na">jpa</span><span class="pi">:</span>
    <span class="na">database-platform</span><span class="pi">:</span> <span class="s">org.hibernate.dialect.H2Dialect</span>
    <span class="na">show-sql</span><span class="pi">:</span> <span class="no">true</span>  
    <span class="na">hibernate</span><span class="pi">:</span>
      <span class="na">naming</span><span class="pi">:</span>
        <span class="na">physical-strategy</span><span class="pi">:</span> <span class="s">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span> 
      <span class="na">ddl-auto</span><span class="pi">:</span> <span class="s">update</span>
      <span class="na">use-new-id-generator-mappings</span><span class="pi">:</span> <span class="no">false</span>
    <span class="s">properties[hibernate.format_sql]</span><span class="err">:</span> <span class="no">true</span> <span class="c1">#포맷 유지</span>
</code></pre></div></div>

<ul>
  <li>spring.datasource : Datasource 연결 정보</li>
  <li>spring.jpa.database-platform :  DB 플랫폼
    <blockquote>
      <ul>
        <li><a href="https://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/session-configuration.html#configuration-optional-dialects">참고! DB마다 다른 플랫폼을 확인하여 넣어줘야 한다.</a></li>
        <li>JPA가 DB에 해당하는 SQL문을 만들어준다.</li>
      </ul>
    </blockquote>
  </li>
  <li>JPA 테이블 컬럼 이름 생성 전략(spring.jpa.hibernate.naming)
    <blockquote>
      <ul>
        <li>implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl : 소문자, 언더바(_) 사용해서 컬럼명 생성, default값 <br />  Ex) userName -&gt; user_name</li>
        <li>physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl : 물리적으로 객체 VO에 적은 대로 적용됨</li>
      </ul>
    </blockquote>
  </li>
  <li>spring.jpa.hibernate.ddl-auto
    <blockquote>
      <ul>
        <li>none : 테이블 생성하지 않음</li>
        <li>update : 테이블 내용 변경될 경우 변경 내용 반영</li>
        <li>create : 기존 테이블 삭제 후 재생성</li>
        <li>create-drop : 기존 테이블 삭제하고 프로그램 종료시 테이블 삭제</li>
        <li>validate : Entity와 테이블이 정상 매핑되었는지 확인</li>
      </ul>
    </blockquote>
  </li>
  <li>spring.jpa.hibernate.use-new-id-generator-mappings : Hibernate의 id 생성 전략을 따라갈지에 대한 선택
    <blockquote>
      <ul>
        <li>Hibernate v5부터 default값은 true이다.(v5 이전은 false가 기본값)</li>
        <li>true일 때, DB가 Hibernate의 id 생성 전략을 따라간다. (AUTO)
          <blockquote>
            <ul>
              <li>MYSQL, H2 DB는 TABLE 전략을 따라간다.</li>
            </ul>
          </blockquote>
        </li>
        <li>false일 때 DB(Dialect)에 의해 결정된다.
          <blockquote>
            <ul>
              <li>H2는 그래도 TABLE 전략을 선택한다.</li>
              <li>MYSQL은 IDENTITY를 선택한다.</li>
            </ul>
          </blockquote>
        </li>
        <li><code class="language-plaintext highlighter-rouge">@GeneratedValue(strategy=GenerationType.INDENTITY)</code> 를 각 엔티티 PK에 적용하는 것이 좋을 것 같다. (yml 파일보다 우선순위가 높다.)</li>
        <li>PK 값 식별 생성 전략
          <blockquote>
            <ul>
              <li>TABLE : 별도의 키 생성 테이블 사용하여 PK값 생성</li>
              <li>SEQUENCE : SEQUENCE를 이용해 PK값 생성</li>
              <li>IDENTITY : auto-increment, IDENTITY를 이용하여 PK값 생성</li>
              <li>AUTO :  Hibernate가 자동으로 정해준다.(default)</li>
            </ul>
          </blockquote>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>spring.jpa.properties[hibernate.format_sql] : 콘솔창에 테이블 생성 포맷 유지(가독성을 위해)</li>
</ul>

<p><br /></p>
<h3 id="repository-method">@Repository Method</h3>

<p>Student.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span> <span class="c1">//lombok</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"STUDENT"</span><span class="o">)</span> <span class="c1">//생성할 테이블 이름 지정</span>
<span class="nd">@Entity</span> <span class="c1">// DB에 테이블 생성</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
	<span class="nd">@Id</span> <span class="c1">// 식별자 변수 (Primary Key) 선언</span>
	<span class="c1">// 1부터 시작하여 자동으로 1씩 값이  증가하도록 설정한다.</span>
	<span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span><span class="nc">GenerationType</span><span class="o">.</span><span class="na">INDENTITY</span><span class="o">)</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">seq</span><span class="o">;</span> <span class="c1">// 학생 일련 번호</span>
	
	<span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span><span class="o">=</span><span class="kc">false</span><span class="o">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">50</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> <span class="c1">// 이름</span>
	<span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span><span class="o">=</span><span class="kc">false</span><span class="o">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">10</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">sex</span><span class="o">;</span> <span class="c1">// 성별</span>
	<span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span><span class="o">=</span><span class="kc">false</span><span class="o">,</span><span class="n">length</span><span class="o">=</span><span class="mi">100</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">role</span><span class="o">;</span> <span class="c1">// 역할</span>
	
	<span class="nd">@CreationTimestamp</span> <span class="c1">//현재 시간 정보(자동 저장) </span>
	<span class="kd">private</span> <span class="nc">Timestamp</span> <span class="n">createDate</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>StudentRepository.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StudentRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;{</span>
        <span class="c1">// findBy컬럼명</span>
        <span class="c1">// 예시 : name 컬럼으로 객체를 찾는 메소드</span>
		<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>JPQL(Java Persistence Query Language)을 메소드로 쉽게 처리할 수 있다.</li>
  <li>쿼리 메소드 : find + 엔티티이름(생략가능)+ By + 변수명</li>
  <li>And, Or, Between, LessThan, GreaterThan 등등 많은 유형이 있다.</li>
</ul>

<p><br /></p>

<p>StudentService.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentService</span> <span class="o">{</span>

	<span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="nc">StudentRepository</span> <span class="n">studentRepository</span><span class="o">;</span>
	
    <span class="c1">//학생 정보 입력</span>
	<span class="nd">@Transactional</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertStudent</span><span class="o">(</span><span class="nc">Student</span> <span class="n">student</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">studentRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="c1">//학생 정보 상세 조회</span>
	<span class="nd">@Transactional</span>
	<span class="kd">public</span> <span class="nc">Student</span> <span class="nf">getStudent</span><span class="o">(</span><span class="kt">int</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>	
		<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">student</span> <span class="o">=</span> <span class="n">studentRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">seq</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">student</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Student</span><span class="o">();</span>		
	<span class="o">}</span>
    <span class="c1">//학생 정보 수정</span>
    <span class="c1">//updateStudent 구현 첫번째</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">updateStudent</span><span class="o">(</span><span class="nc">Student</span> <span class="n">student</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">findEntity</span><span class="o">=</span> <span class="n">studentRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getSeq</span><span class="o">());</span>
		<span class="k">if</span><span class="o">(</span><span class="n">findEntity</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
		<span class="nc">Student</span> <span class="n">findStudent</span> <span class="o">=</span> <span class="n">findEntity</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
		<span class="n">findStudent</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
		<span class="n">findStudent</span><span class="o">.</span><span class="na">setSex</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getSex</span><span class="o">());</span>
		<span class="n">findStudent</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getRole</span><span class="o">());</span>
		<span class="n">studentRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">findStudent</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"학생 정보 수정 성공"</span><span class="o">;</span>
	<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">student</span><span class="o">.</span><span class="na">getSeq</span><span class="o">()+</span><span class="s">" 번 학생 정보는 없습니다."</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
    <span class="c1">//updateStudent 구현 두번쨰(@Transactional 차이)</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">updateStudent</span><span class="o">(</span><span class="nc">Student</span> <span class="n">student</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">findEntity</span><span class="o">=</span> <span class="n">studentRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getSeq</span><span class="o">());</span>
		<span class="k">if</span><span class="o">(</span><span class="n">findEntity</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">Student</span> <span class="n">findStudent</span> <span class="o">=</span> <span class="n">findEntity</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
			<span class="n">findStudent</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
			<span class="n">findStudent</span><span class="o">.</span><span class="na">setSex</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getSex</span><span class="o">());</span>
			<span class="n">findStudent</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getRole</span><span class="o">());</span>
		<span class="k">return</span> <span class="s">"학생 정보 수정 성공"</span><span class="o">;</span>
	<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">student</span><span class="o">.</span><span class="na">getSeq</span><span class="o">()+</span><span class="s">" 번 학생 정보는 없습니다."</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
	<span class="c1">//학생 정보 삭제</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteStudent</span><span class="o">(</span><span class="kt">int</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">studentRepository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">seq</span><span class="o">);</span>
	<span class="o">}</span>
    
    <span class="c1">//학생 정보 목록 조회</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="nf">getStudentList</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">studentRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
	<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>@Transactional : 로직 진행 중 예외 없이 성공하면 커밋한다.</li>
</ul>

<p><br /></p>

<p>StudentController.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentController</span> <span class="o">{</span>
	
	<span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="nc">StudentService</span> <span class="n">studentService</span><span class="o">;</span>
	
    <span class="c1">//학생 정보 상세 조회</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/student/{seq}"</span><span class="o">)</span> 
	<span class="kd">public</span> <span class="nc">Student</span> <span class="nf">getStudent</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span> 
		<span class="k">return</span> <span class="n">studentService</span><span class="o">.</span><span class="na">getStudent</span><span class="o">(</span><span class="n">seq</span><span class="o">);</span>
	<span class="o">}</span>
    
    <span class="c1">//학생 정보 입력</span>
	<span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/student"</span><span class="o">)</span>
    <span class="nd">@ResponseBody</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">insertStudent</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Student</span> <span class="n">student</span><span class="o">)</span> <span class="o">{</span>
	 <span class="nc">Student</span> <span class="n">findStudent</span> <span class="o">=</span> <span class="n">studentService</span><span class="o">.</span><span class="na">getStudent</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getSeq</span><span class="o">());</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">findStudent</span><span class="o">.</span><span class="na">getName</span><span class="o">()==</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">studentService</span><span class="o">.</span><span class="na">insertStudent</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
			<span class="k">return</span> <span class="n">student</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 학생 정보 등록 성공"</span><span class="o">;</span>
		<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">student</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"학생 정보는 존재합니다."</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
        
    <span class="c1">//학생 정보 수정</span>
    <span class="nd">@PutMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">updateStudent</span><span class="o">(</span><span class="nd">@RequsetBody</span> <span class="nc">Student</span> <span class="n">student</span><span class="o">){</span>
  		<span class="k">return</span> <span class="n">studentService</span><span class="o">.</span><span class="na">updateStudent</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
 	<span class="o">}</span>    
    
    <span class="c1">//학생 정보 삭제</span>
    <span class="nd">@ResponseBody</span>
    <span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">"/student/{seq}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">deleteList</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">seq</span><span class="o">){</span>
    	 <span class="n">studentService</span><span class="o">.</span><span class="na">deleteStudent</span><span class="o">(</span><span class="n">seq</span><span class="o">);</span>
         <span class="k">return</span> <span class="s">"학생 정보 삭제 성공"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//학생 정보 목록 조회</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/student/list"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="nf">getStudentList</span><span class="o">(){</span>
    	<span class="k">return</span> <span class="n">studentService</span><span class="o">.</span><span class="na">getStudentList</span><span class="o">();</span>
    <span class="o">}</span>
    
<span class="o">}</span>

</code></pre></div></div>

<p><br />
Reference:</p>
<ul>
  <li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew">inflean_img</a></li>
  <li><a href="https://velog.io/@jsj3282/2.-JPA-%EC%86%8C%EA%B0%9C2"> JPA 소개(2) img _ jsj3282</a></li>
  <li><a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#naming"> 2.2 Naming strategies _ HIBERNATE</a></li>
  <li><a href="https://jojoldu.tistory.com/295">Spring Boot Data JPA 2.0 에서 id Auto_increment 문제 해결_기억보다 기록을</a></li>
  <li><a href="https://vladmihalcea.com/hibernate-identity-sequence-and-table-sequence-generator/">How do Identity, Sequence, and Table (sequence-like) generators work in JPA and Hibernate</a></li>
</ul>
:ET