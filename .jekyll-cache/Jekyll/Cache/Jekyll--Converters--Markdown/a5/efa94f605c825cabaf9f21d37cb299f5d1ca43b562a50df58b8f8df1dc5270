I"V4<ul>
  <li>Spring Container가 참고하는 .xml 파일로만 Controller, HandlerMapping을 직접 모두 등록해서 Spring을 사용하는 것은 유지보수가 쉽지 않은 단점이 있었다.</li>
  <li>Annotation을 이용하면 단점을 해결할 수 있다.</li>
</ul>

<p><br /></p>

<h3 id="spring-mvc-annotation">Spring MVC Annotation</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--생략--&gt;</span>
<span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"com.naver.biz.controller"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!--생략--&gt;</span>
</code></pre></div></div>

<ul>
  <li>먼저 Spring Container가 참고하는 .xml에 위 태그를 추가해준다.</li>
  <li><code class="language-plaintext highlighter-rouge">com.naver.biz.controller</code> 아래 패키지의 Annotation을 인식해서 사용하겠다는 의미이다.</li>
</ul>

<p><br /></p>
<h4 id="controller-requestmapping">@Controller, @RequestMapping</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>

<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentController</span><span class="o">{</span>
		
        <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/insertStudent.service"</span><span class="o">)</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">insertStudent</span><span class="o">(</span><span class="nc">StudentVO</span> <span class="n">vo</span><span class="o">,</span> <span class="nc">StudentDAO</span> <span class="n">dao</span><span class="o">){</span>
        <span class="c1">//생략</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>@Controller : 해당 클래스를 컨트롤러로 사용하겠다는 의미이다.</li>
  <li>@RequestMapping() : 클라이언트로부터 오는 요청이 오면 해당 메소드를 실행하겠다는 의미이다.</li>
  <li>Annatation의 장점
    <blockquote>
      <ul>
        <li>POJO(Plain Old Java Object)로 사용할 수 있어지므로 제약이 없어진다. (ModelAndView를 리턴하는 것, handleRequest를 오버라이딩해야하는 것의 제약)</li>
        <li>매개변수로 객체를 받아 로직을 바로 처리할 수 있다.
          <blockquote>
            <ul>
              <li>일반적인 POJO 객체 뿐만 아니라 Servlet이 제공하는 HttpServletRequest, HttpServletResponse, HttpSession까지 객체로 받아 처리할 수 있다.</li>
            </ul>
          </blockquote>
        </li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h4 id="requestparam">@RequestParam</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentController</span><span class="o">{</span>
		
        <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/deleteStudent.service"</span><span class="o">)</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">deleteStudent</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"studentNum"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="nc">StudentDAO</span> <span class="n">dao</span><span class="o">){</span>
        <span class="c1">//생략</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>파라미터로 받는 변수 이름과 매개변수 이름이 다를 때 @RequestParam을 이용하여 1:1로 매칭시켜준다.</li>
  <li>위 예시에서는 studentNum으로 받을 값이 num으로 사용되면 된다는 것을 의미한다.</li>
</ul>

<p><br /></p>

<h4 id="modelattribute">@ModelAttribute</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  	  <span class="c1">//생략</span>
    <span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">"studentList"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getStudentList</span><span class="o">()</span> <span class="o">{</span>
         <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">studentList</span><span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
        <span class="n">studentList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"이철수"</span><span class="o">);</span> 
        <span class="n">studentList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"김길동"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">studentList</span><span class="o">;</span>
	<span class="o">}</span>

  	  <span class="c1">//생략</span>
      <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/insertStudentView.do"</span><span class="o">)</span>
	  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">insertStudentView</span><span class="o">(</span><span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">"student"</span><span class="o">)</span> <span class="nc">StudentVO</span> <span class="n">vo</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">vo</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"김철수"</span><span class="o">);</span>
		<span class="n">vo</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="s">"반장"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"insertStudent"</span><span class="o">;</span>
 	<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>@ModelAttribute는 메소드, 매개변수 객체 앞에 붙을 수 있다.</li>
  <li>메소드 앞에 붙을 때
    <blockquote>
      <ul>
        <li>“studentList” : studentList(key: value) 형태로 Model에 저장해준다.</li>
        <li>JSP, Html에서 List를 출력하는 방법</li>
      </ul>

      <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&lt;</span><span class="nl">c:</span><span class="n">forEach</span> <span class="n">items</span><span class="o">=</span><span class="s">"${studentList} var="</span><span class="n">student</span><span class="err">"</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="err">$</span><span class="o">{</span><span class="n">student</span><span class="o">}&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
 	<span class="o">&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nl">c:</span><span class="n">forEach</span><span class="o">&gt;</span>
</code></pre></div>      </div>
    </blockquote>
  </li>
  <li>매개변수 앞에 붙을 때
    <blockquote>
      <ul>
        <li>@ModelAttribute(“name”), name을 변경하면 접근 이름을 바꿀 수 있으며 생략하면 클래스의 첫 글자만 소문자로 변경해서 등록된다.</li>
        <li>@ModelAttribute을 이용해 접근하는 객체는 비어있어야 하고 getter/setter가 있어야 한다.</li>
        <li>@ModelAttribute 자체도 생략 가능하고 대상 객체는 자동으로 등록된다.</li>
        <li>JSP, Html에서 <code class="language-plaintext highlighter-rouge">${student.name}</code> 방법으로 접근 가능하다.</li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h3 id="spring-mvc-viewresolver">Spring MVC ViewResolver</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"viewResolver"</span> <span class="na">class=</span><span class="s">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"prefix"</span> <span class="na">value=</span><span class="s">"/WEB-INF/views/"</span><span class="nt">/&gt;</span>
    	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"suffix"</span> <span class="na">value=</span><span class="s">".jsp"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>
	
</code></pre></div></div>

<ul>
  <li>먼저 Spring Container가 참고하는 .xml에 위 태그를 추가해준다.</li>
  <li>viewResolver는 view를 생성해주는 역할을 한다.</li>
  <li>전의 Controller들은 ModelAndView 객체를 리턴했었고 그 과정에서 아래의 메소드를 사용했었다.
    <blockquote>
      <ul>
        <li><code class="language-plaintext highlighter-rouge">addObject("name",object)</code> : Model(Data 처리 값) 저장</li>
        <li><code class="language-plaintext highlighter-rouge">setViewName("/WEB-INF/views/ getStudentList.service.jsp")</code> : 이동할 View 저장</li>
      </ul>
    </blockquote>
  </li>
  <li>Model 값과 View를 분리하면서 View 처리와 유지보수를 좋게 하기 위해 viewResolver를 사용한다.
    <blockquote>
      <ul>
        <li>Model 객체는 <code class="language-plaintext highlighter-rouge">addAttribute("name",object)</code> 로 Model을 저장하는 메소드를 지원한다.</li>
      </ul>
    </blockquote>
  </li>
  <li>Controller가 String을 리턴하면 prefix + String 리턴값 + suffix 값으로 View 주소를 완성시켜준다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentController</span><span class="o">{</span>
		
        <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/getStudentList.service"</span><span class="o">)</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getStudentList</span><span class="o">(</span><span class="nc">StudentVO</span> <span class="n">vo</span><span class="o">,</span> <span class="nc">StudentDAO</span> <span class="n">dao</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">){</span>
        
        <span class="c1">//생략</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">StudentVO</span><span class="o">&gt;</span> <span class="n">studentList</span> <span class="o">=</span> <span class="n">dao</span><span class="o">.</span><span class="na">getStudentList</span><span class="o">(</span><span class="n">vo</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"studentList"</span><span class="o">,</span> <span class="n">studentList</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"getStudentList.service"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>위의 예시에서는 <code class="language-plaintext highlighter-rouge">"/WEB-INF/views/getStudentList.service.jsp"</code> 로 이동한다.</li>
  <li>다른 View가 아닌 특정 요청으로 이동하고 싶을 때는 forward, redirect를 이용하여 리턴하면 된다.
    <blockquote>
      <ul>
        <li>forward : <code class="language-plaintext highlighter-rouge">return forward:getStudentList.service</code></li>
        <li>redirect : <code class="language-plaintext highlighter-rouge">return redirect:getStudentList.service</code></li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br />
Reference:</p>
<ul>
  <li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew">inflean_img</a></li>
  <li><a href="https://woolbro.tistory.com/43">[스프링 MVC] @Controller, @RequestMapping_ 연로그</a></li>
  <li><a href="https://mangkyu.tistory.com/72">[Spring] @RequestBody, @ModelAttribute, @RequestParam의 차이
_ MangKyu’s Diary</a></li>
  <li><a href="http://ojc.asia/bbs/board.php?bo_table=LecSpring&amp;wr_id=856">@ModelAttribute를 이용한 스프링 컨트롤러 메소드 매핑_ORACLEJAVA Community</a></li>
</ul>
:ET