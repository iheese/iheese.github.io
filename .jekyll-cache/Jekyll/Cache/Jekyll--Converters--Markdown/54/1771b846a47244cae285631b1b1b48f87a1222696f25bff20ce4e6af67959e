I"j=<h4 id="데이터베이스의-특징은-무엇인가요">데이터베이스의 특징은 무엇인가요?</h4>
<ul>
  <li>실시간 접근성 : 비정형적인 질의에 대하여 실시간 처리에 의한 응답이 가능해야 한다.</li>
  <li>지속적인 변화 : 데이터베이스의 상태는 동적이다. 새로운 데이터의 삽입, 삭제, 갱신으로 항상 최신의 데이터를 유지해야 한다.</li>
  <li>동시 공용 : 데이터베이스는 서로 다른 목적을 가진 여러 응용자들을 위한 것이므로 다수의 사용자가 동시에 같은 내용을 이용할 수 있어야 한다.</li>
  <li>내용에 의한 참조 : 데이터베이스에 있는 데이터를 참조할 때 레코드의 주소나 위치에 의해서가 아니라 사용자가 요구하는 데이터 내용으로 찾습니다.</li>
</ul>

<p><br /></p>

<h4 id="데이터베이스에서-인덱스를-사용하는-이유-및-장단점에-대해-설명해주세요">데이터베이스에서 인덱스를 사용하는 이유 및 장단점에 대해 설명해주세요.</h4>
<ul>
  <li>DB에서 인덱스를 사용하는 이유는 검색성능을 향상시키기 위해서 입니다.</li>
  <li>인덱스는 항상 정렬된 상태를 유지하기 때문에 원하는 값을 검색하는데는 빠르지만, 새로운 값을 추가하거나, 삭제, 수정하는 쿼리문 실행 속도는 느립니다.</li>
  <li>저장 성능은 희생하고 그 대신 데이터의 검색 속도를  높이는 기능이라 할 수 있습니다.</li>
</ul>

<p><br /></p>

<h4 id="데이터베이스-언어ddl-dml-dcl에-대해-설명해주세요">데이터베이스 언어(DDL, DML, DCL)에 대해 설명해주세요.</h4>
<ul>
  <li>DDL(정의어, Data Definition Language) : 데이터베이스 구조를 수정, 삭제하는 언어(alter, create, drop)</li>
  <li>DML(조작어, Data Manipulation Language) : 데이터베이스 내의 자료 검색, 삽입, 갱신, 삭제를 위한 언어(select, insert, update, delete)</li>
  <li>DCL(제어어, Data Control Language) : 데이터에 대해 무결성 유지, 병행 수행 제어, 보호와 관리를 위한 언어(commit, rollback, grant, revoke)</li>
</ul>

<p><br /></p>

<h4 id="select-쿼리-수행-순서를-알려주세요">SELECT 쿼리 수행 순서를 알려주세요.</h4>
<ol>
  <li>FROM, ON, JOIN</li>
  <li>WHERE, GROUP BY, HAVING</li>
  <li>SELECT</li>
  <li>DISTINCT</li>
  <li>ORDER BY</li>
  <li>LIMIT</li>
</ol>

<p><br /></p>

<h4 id="dbmsdatabase-management-system는-인덱스를-어떻게-관리하고-있나요">DBMS(Database Management System)는 인덱스를 어떻게 관리하고 있나요?</h4>
<ul>
  <li>B+Tree 인덱스 자료구조
    <blockquote>
      <ul>
        <li>자식 노드가 2개 이상인 B-Tree를 개선시킨 자료구조입니다.</li>
        <li>B-Tree 리프노드들을 LinkedList로 연결하여 순차 검색을 용이하게 합니다. 해시테이블보다 나쁜 O(lon2N)의 시간 복잡도를 갖지만 일반적으로 사용되는 자료구조입니다.</li>
      </ul>
    </blockquote>
  </li>
  <li>해시테이블
    <blockquote>
      <ul>
        <li>컬럼의 값으로 생성된 해시를 기반으로 인덱스를 구현합니다.</li>
        <li>시간 복잡가 O(1)이라 검색이 매우 빠릅니다.</li>
        <li>부등호와 같은 연속적인 데이터를 위한 순차 검색이 불가능하기 때문에 사용에 적합하지 않습니다.</li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h4 id="정규화에-대해서-설명해주세요">정규화에 대해서 설명해주세요.</h4>
<ul>
  <li>하나의 릴레이션에 하나의 의미만 존재하도록 릴레이션을 분해하는 과정입니다.</li>
  <li>데이터의 일관성, 데이터 중복방지, 무결성, 유연성을 충족시키기 위해 데이터베이스를 설계하는 것을 의미합니다.</li>
  <li>제 1정규형 : 테이블의 컬럼이 원자값(하나의 값)을 갖도록 분해합니다.</li>
  <li>제 2정규형 : 제 1정규형을 만족하고 기본키가 아닌 속성이 기본키에 완전 함수 종속이도록 분해합니다.
    <blockquote>
      <ul>
        <li>완전 함수 종속 : 가본키의 부분집합이 다른 값을 결정하지 않는 것을 의미</li>
      </ul>
    </blockquote>
  </li>
  <li>제 3정규형 : 제 2정규형을 만족하고, 이행적 함수 종속을 없애도록 분해합니다.
    <blockquote>
      <ul>
        <li>이행적 종속 : A <code class="language-plaintext highlighter-rouge">-&gt;</code> B,  B <code class="language-plaintext highlighter-rouge">-&gt;</code> C 일 때, A <code class="language-plaintext highlighter-rouge">-&gt;</code> C가 성립하는  것을 의미</li>
      </ul>
    </blockquote>
  </li>
  <li>
    <p>BCNF 정규형 : 제 3정규형을 만족하고, 함수 종속성 X <code class="language-plaintext highlighter-rouge">-&gt;</code> 가 성립할 때 모든 결정자 X가 후보키가 되도록 분해합니다.</p>
  </li>
  <li><a href="https://dev-coco.tistory.com/62">정규화_슬기로운 개발생활</a></li>
</ul>

<p><br /></p>

<h4 id="이상-현상의-종류에-대해-말해주세요">이상 현상의 종류에 대해 말해주세요.</h4>
<ul>
  <li>테이블 설계시 설계 오류로 인해 데이터를 삽입, 삭제, 수정할 때 생기는 논리적 오류를 말합니다.
    <blockquote>
      <ul>
        <li>삽입 이상 : 자료를 삽입할 때 특정 속성에 해당하는 값이 없어 NULL을 입력해야 하는 현상</li>
        <li>갱신 이상 : 중복된 데이터 중 일부만 수정되어 데이터 모순이 일어나는 현상</li>
        <li>삭제 이상 : 어떤 정보를 삭제하면, 다른 데이터도 삭제되는 현상</li>
      </ul>
    </blockquote>
  </li>
  <li>이를 막기 위해 데이터 정규화가 필요합니다.</li>
</ul>

<p><br /></p>

<h4 id="pk-fk-의-특징에-대해-말해주세요">PK, FK 의 특징에 대해 말해주세요.</h4>
<ul>
  <li>PK(Primary Key)
    <blockquote>
      <ul>
        <li>엔티티를 식별하는 대표 key</li>
        <li>Null 값을 가질 수 없고 중복된 값을 가질 수 없다.</li>
        <li>Table당 1개만 지정해야한다.</li>
      </ul>
    </blockquote>
  </li>
  <li>FK(Foreign Key)
    <blockquote>
      <ul>
        <li>외부 식별자 key로 테이블 간의 관계를 의미한다.</li>
        <li>두 테이블 간의 종속이 필요한 관계이면 그 접점이 되는 컬럼을 FK로 지정하여 서로 참조할 수 있도록 관계를 맺어준다.</li>
        <li>테이블 간의 잘못된 매핑을 방지하는 역할도 있다.</li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h4 id="트랜잭션에-대해서-설명해주세요">트랜잭션에 대해서 설명해주세요.</h4>
<ul>
  <li>작업 완정성을 보장해줍니다.</li>
  <li>작업들이 모두 처리하거나 처리되지 못할 경우이전 상태로 복구하여 작업의 일부만 적용되는 현상을 막아줍니다.</li>
  <li>하나의 트랜잭션은 Commit 되거나 Rollback 됩니다.</li>
</ul>

<p><br /></p>

<h4 id="트랜잭션의-특성acid에-대해-말해주세요">트랜잭션의 특성(ACID)에 대해 말해주세요.</h4>
<ul>
  <li>원자성(Atomicity) : 작업이 반영되거나 전혀 반영되지 않아야 한다.</li>
  <li>일관성(Consistency) : 실행이 완료되면 항상 일관성 있는 상태를 유지해야 한다.</li>
  <li>독립성(Isolation) : 둘 이상의 트랜잭션이 동시에 실행될 경우 서로의 연산에 끼어들 수 없다.</li>
  <li>영속성(Durability) : 완료된 결과는 영구적으로 반영되어야 한다.</li>
</ul>

<p><br /></p>

<h4 id="트랜잭션-격리-수준transaction-isolation-levels에-대해서-설명해주세요">트랜잭션 격리 수준(Transaction Isolation Levels)에 대해서 설명해주세요.</h4>
<ul>
  <li>트랜잭션 격리수준은 고립도와 성능의 트레이드 오프를 조절합니다.</li>
  <li>READ UNCOMMITTED : 다른 트랜잭션에서 커밋되지 않은 내용도 참조할 수 있다.</li>
  <li>READ COMMITTED : 다른 트랜잭션에서 커밋된 내용만 참조할 수 있다.</li>
  <li>REPEATABLE READ : 트랜잭션에 진입하기 이전에 커밋된 내용만 참조할 수 있다.</li>
  <li>SERIALIZABLE : 트랜잭션에 진입하면 락을 걸어 다른 트랜잭션이 접근하지 못하게 한다.(성능이 매우 떨어진다.)</li>
</ul>

<p><br /></p>

<h4 id="join에-대해서-설명해주세요">JOIN에 대해서 설명해주세요.</h4>
<ul>
  <li>두 개 이상의 테이블을 연결해서 조회하는 방법을 말합니다.</li>
  <li>inner join : 서로 연관된 내용만 검색하는 방법입니다. A, B에 대해 수행하는 것은 A, B의 교집합을 말합니다.</li>
  <li>outer join : 한 쪽에 데이터가 있고 한 쪽에 데이터가 없는 경우, 있는 쪽의 내용을 전부  출력하는 방법을 말합니다. A, B에 대해 수행하는 것은 A, B의 합집합을 말합니다.</li>
</ul>

<p><br /></p>

<h4 id="rdbms-vs-nosql에-대해서-설명해주세요">RDBMS vs NOSQL에 대해서 설명해주세요.</h4>
<ul>
  <li>RDBMS(Relational DataBase Management System) : 모든 데이터를  2차원 테이블 형태로 표현합니다.
    <blockquote>
      <ul>
        <li>장점 : 스키마에 맞춰 데이터를 관리하기 때문에 데이터의 정합성을 보장할 수 있다.</li>
        <li>단점 : 시스템이 커질 수록 쿼리가 복잡해지고 성능이 저하되며 Scale-out이 어렵다.(장비를 추가해서 확장) (Scale-Up만 가능 : 용량, 사양을 높이는 것)</li>
      </ul>
    </blockquote>
  </li>
  <li>NoSQL(Not Only SQL) : 데이터 간 관계를 정의하지 않고, 스키마가 없어 좀 더 자유롭게 데이터를 관리할 수 있으며, 컬렉션이라는 형태로 데이터를 관리합니다.
    <blockquote>
      <ul>
        <li>장점
          <blockquote>
            <ul>
              <li>스키마없이 Key-Value 형태로 데이터를 자유롭게 관리할 수 있다.</li>
              <li>데이터 분산이 용이하여 Scale-Out, Scale-Up 모두 가능하다.</li>
            </ul>
          </blockquote>
        </li>
        <li>단점
          <blockquote>
            <ul>
              <li>데이터 중복이 발생할 수 있고, 중복된 데이터가 변경될 경우 모든 컬렉션에서 수정을 수행해야 한다.</li>
              <li>스키마가 존재하지 않기 때문에 명확한 데이터 구조를 보장하지 않아 데이터 구조 결정이 어려울 수 있다.</li>
            </ul>
          </blockquote>
        </li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h4 id="redis에-대해서-간단히-설명해주세요">Redis에 대해서 간단히 설명해주세요.</h4>
<ul>
  <li>Key-value 타입의 인메모리 저장소이며 NoSQL입니다. 싱글 스레드로 동작하며 자료구조를 지원합니다. 문자열, 리스트, 해시, 셋, 정렬된 셋 형식의 데이터를 지원합니다.</li>
  <li>Redis의 영속성은 스냅샷(순간적으로 메모리에 있는 내용을 DISK에 전체를 옮겨 담는 방식), AOF 방식(Append On File, Redis의 모든 write, update 연산 자체를 모두 log 파일에 기록하는 형태)으로 지원합니다.</li>
</ul>

<p><br /></p>

<h4 id="redis와-memcached의-차이에-대해서-설명해주세요">Redis와 Memcached의 차이에 대해서 설명해주세요.</h4>
<ul>
  <li>Redis : 싱글 스레드 기반, 다양한 자료구조</li>
  <li>Memcached : 멀티 스레드 가능, 문자열 형태만 저장</li>
</ul>

<p><br /></p>

<h4 id="elastic-search에-대해서-간단히-설명해주세요">Elastic Search에 대해서 간단히 설명해주세요.</h4>
<ul>
  <li>자바로 개발된 오픈 소스 검색 엔진입니다. ELK( Elasticsearch / Logstatsh / Kibana )스택으로 사용되기도 합니다.
    <blockquote>
      <ul>
        <li>Logstash : 다양한 소스(DB, csv 파일 등)의 로그 또는 트랜잭션 데이터를 수집, 집계, 파싱하여 Elasticsearch에 전달</li>
        <li>Elasticsearch : Logstash로부터 받은 데이터를 검색 및 집계를 하여 필요한 관심 있는 정보를 획득</li>
        <li>Kibana : Elasticsearch의 빠른 검색을 통해 데이터를 시각화 및 모니터링</li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<h4 id="elastic-search의-인덱스구조와-rdbms의-인덱스-구조의-차이에-대해-설명해주세요">Elastic Search의 인덱스구조와 RDBMS의 인덱스 구조의 차이에 대해 설명해주세요.</h4>
<ul>
  <li>Elastic Search는 역색인 구조로 데이터를 저장합니다. 특정 단어가 출현하는 doc을 저장하는 형태입니다.
    <blockquote>
      <ul>
        <li>역색인 구조(Inverted Index) : 특정 키워드를 포함하고 있는 문서들에 대한 Primary Key를 매핑하는 인덱스 테이블을 생성하고, 이 테이블을 이용해 빠른 문서 탐색을 가능하게 합니다.
          <blockquote>
            <ul>
              <li>BTree(B-Tree를 개선시킨 자료구조), Trie(문자열 집합 트리 자료구조), Hash Table(해시함수 기반의 key-value 자료구조)로 주로 구현됨</li>
            </ul>
          </blockquote>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>RDBMS는 B-Tree와 그와 유사한 인덱스를 사용합니다.</li>
</ul>

<p><br /></p>

<h4 id="elastic-search의-키워드-검색과-rdbms의-like-검색의-차이에-대해-설명해주세요">Elastic Search의 키워드 검색과 RDBMS의 LIKE 검색의 차이에 대해 설명해주세요.</h4>
<ul>
  <li>Elastic Search는 역색인 방식으로 저장되기 때문에 동의어나 유의어를 활용한 검색이 가능하며 비정형 데이터의 색인과 검색이 가능합니다.</li>
  <li>RDBMS는 단순 텍스트 매칭에 대한 검색을 제공해 동의어, 유의어 같은 검색은 불가능합니다.</li>
</ul>

<p><br /></p>

<h4 id="mysql-80-부터-달라진-점">MySQL 8.0 부터 달라진 점</h4>
<ul>
  <li>I/O 바운드 읽기 전용 : 8.0부터 내림차순 인덱스를 지원함에 따라 읽기 성능에서 크게 개선되었습니다.</li>
  <li>읽기 쓰기 성능 증가</li>
  <li>이중 쓰기 버퍼, IO 바인딩 읽기 쓰기 성능 증가</li>
  <li>데이터 딕셔너리 업그레이드 : 5.7까지는 데이터 딕셔너리 정보가 FRM 확장자를 가진 파일로 별도로 보관됐었는데 8.0부터 데이터 딕셔너리 정보가 트랜잭션이 지원되는 InnoDB 테이블로 저장되도록 개선되었다. 또한 호환성 관리를 위해 MySQL 버전 정보도 함께 기록 된다.</li>
</ul>

<p><br /></p>

<h4 id="추가-학습할-것들">추가 학습할 것들</h4>
<p>MongoDB에 대해서 간단히 설명해주세요.
CAP 이론과, Eventual Consistency에 대해서 설명해주세요.</p>

<p><br /></p>

<p>Reference:</p>
<ul>
  <li><a href="https://github.com/ksundong/backend-interview-question">Backend-Interview-Question_ ksundong</a></li>
  <li><a href="https://dev-coco.tistory.com/158">신입 개발자 기술면접 질문 정리-데이터베이스_슬기로운 개발 생활</a></li>
  <li><a href="https://velog.io/@wijoonwu/%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8">내가 받은 ‘백엔드 기술 면접 질문’ 모음_wijoonwu</a></li>
  <li><a href="https://hinweis.tistory.com/65?category=942059">MySQL성능 비교_화니의 블로그</a></li>
</ul>
:ET