I"̋<p><img src="/img/posts/javaetc/collection.png" alt="collection" /></p>

<p><br /></p>

<h2 id="arraylist">ArrayList</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayListTest</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ArrayList</span> <span class="n">noTypeList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span> <span class="c1">// 타입없는 리스트 생성</span>
		<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">personList1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;();</span> <span class="c1">//Person 타입 리스트 생성</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">personList2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;();</span>
		<span class="c1">// 묵시적 형 변환으로 생성(유지, 보수, 변경에 유리)</span>
		<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">// new 뒤에 제너릭은 비워도 컴파일러가 자동으로 채워준다.</span>
        <span class="c1">//Integer 타입 리스트 생성</span>
		<span class="n">integerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">integerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
		<span class="n">integerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">//값 추가</span>
		<span class="n">integerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span> <span class="c1">//1번 인덱스에 5 추가, 뒤의 데이터 밀림</span>
		<span class="n">integerList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//1번 인덱스 제거, 앞으로 땡겨짐</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerList</span><span class="o">.</span><span class="na">size</span><span class="o">());</span> <span class="c1">//리스트 크기 //3</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span> <span class="c1">//리스트 0번째 인덱스 // 1</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerList</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span> <span class="c1">//2 데이터 값이 존재하는지 // true</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerList</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span> <span class="c1">// 2 데이터의 인덱스 값 // 1</span>
		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>List 인터페이스를 구현한 선형 리스트 컬렉션</li>
  <li>기본적으로 10의 저장공간이 주어지며 10의 저장공간을 넘어가면 10개씩 늘어난다.</li>
  <li>중복이 인정되며 넣는 순서대로 순서를 보장해준다.</li>
  <li>ArrayList를 생성할 때 타입을 선언해주지 않으면 다양한 타입의 데이터를 입력 받을 수 있다. 그러나 입력된 값을 꺼낼 때 캐스팅 과정이 필요하게 되므로 그 과정에서 에러가 발생할 수 있어 타입을 명시해준다.
    <blockquote>
      <ul>
        <li>Generics(제너릭)  : 타입 선언의 안정성을 위해 도입된 개념</li>
        <li><code class="language-plaintext highlighter-rouge">ArrayList&lt;객체 타입&gt;</code> 으로 선언할 수 있다.</li>
        <li>int 같은 기본자료형은 들어갈 수 없다. 기본자료형을 객체화시킨 wrapper 클래스를 이용해야 한다. (Ex: int &gt; Integer)</li>
      </ul>
    </blockquote>
  </li>
  <li>add() : 데이터 입력받기
    <blockquote>
      <ul>
        <li>데이터를 입력 받을 때는 무조건 Object 타입으로 변환되어 저장된다.</li>
      </ul>
    </blockquote>
  </li>
  <li>get([index]) : 인덱스 해당 데이터 꺼내오기
    <blockquote>
      <ul>
        <li>Object 타입으로 저장되었기 때문에 명시적 형 변환을 해주어야 한다.</li>
      </ul>
    </blockquote>
  </li>
  <li>remove([index]) :  인덱스 해당 데이터 삭제
    <blockquote>
      <ul>
        <li>clear() : 모든 값 제거</li>
      </ul>
    </blockquote>
  </li>
  <li>contains(data) : list에 data 있으면 true, 없으면 false</li>
  <li>indexOf(data) : list에 data 있으면 해당 인덱스 반환, 없으면 -1</li>
</ul>

<p><br /></p>

<h2 id="hashset">HashSet</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSetTest</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">HashSet</span> <span class="n">noTypeSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">();</span> <span class="c1">// 타입없이 생성</span>
		<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">personSet1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;();</span> <span class="c1">//묵시적 형 변환 	</span>
		<span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
		<span class="c1">// new 뒤의 제너릭은 생략 가능</span>
		<span class="n">integerSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> 
		<span class="n">integerSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
		<span class="n">integerSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">//데이터 추가</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span> <span class="c1">// 이미 데이터가 존재하지 않으면 true, 존재하면 false // false</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerSet</span><span class="o">.</span><span class="na">size</span><span class="o">());</span> <span class="c1">// Set 크기 구하기 // 3</span>
		<span class="n">integerSet</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">// 데이터 삭제</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerSet</span><span class="o">);</span> <span class="c1">//전체값 출력 // [1, 2]</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerSet</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span> <span class="c1">//내부 데이터 존재하면 true, 아니면 false //true</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Set 인터페이스를 구현한 컬렉션</li>
  <li>add() :  데이터 입력</li>
  <li>remove(data) : 데이터값을 넣으면 해당 데이터를 삭제한다.</li>
  <li>size() :  Set 크기 구하기</li>
  <li>contains(data) : 데이터 존재하면 true, 없으면 false</li>
  <li>객체를 중복해서 저장할 수 없고 순서가 보장되지 않는다. (인덱스 없음)
    <blockquote>
      <ul>
        <li>wrapper class는 자동으로 중복을 막아준다. (기본자료형을 객체화 시킨 것들 : Byte,  Character, Integer, Float, Double, Boolean, 	Long, Short )</li>
        <li>일반적으로 생성한 객체는 중복 허용을 막기 위해 오버라이딩이 필요하다.
          <blockquote>
            <ul>
              <li>hashCode() ,equals()</li>
              <li>또한 toString을 오버라이딩하지 않으면 참조변수값이 출력된다.</li>
            </ul>
          </blockquote>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>hashCode() ,equals() 을 오버라이딩 하지 않았을 때</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashFoodTest</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    
    	<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Food</span><span class="o">&gt;</span> <span class="n">foodSet</span><span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
		<span class="n">foodSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Food</span><span class="o">(</span><span class="s">"kimbab"</span><span class="o">,</span> <span class="mi">2000</span><span class="o">));</span>
		<span class="n">foodSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Food</span><span class="o">(</span><span class="s">"ramyeon"</span><span class="o">,</span> <span class="mi">4000</span><span class="o">));</span>
		<span class="n">foodSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Food</span><span class="o">(</span><span class="s">"ramyeon"</span><span class="o">,</span> <span class="mi">4000</span><span class="o">));</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">foodSet</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="c1">//[Food [name=kimbab, price=2000], Food [name=ramyeon, price=4000], Food [name=ramyeon, price=4000]]</span>
		<span class="c1">//라면이 중복되었다. </span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Food</span><span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Food</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"Food [name="</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">", price="</span> <span class="o">+</span> <span class="n">price</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>hashCode() ,equals() 을 오버라이딩했을 때</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSetTest</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    
		<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Food</span><span class="o">&gt;</span> <span class="n">foodSet</span><span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
		<span class="n">foodSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Food</span><span class="o">(</span><span class="s">"kimbab"</span><span class="o">,</span> <span class="mi">2000</span><span class="o">));</span>
		<span class="n">foodSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Food</span><span class="o">(</span><span class="s">"ramyeon"</span><span class="o">,</span> <span class="mi">4000</span><span class="o">));</span>
		<span class="n">foodSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Food</span><span class="o">(</span><span class="s">"ramyeon"</span><span class="o">,</span> <span class="mi">4000</span><span class="o">));</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">foodSet</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="c1">//[Food [name=ramyeon, price=4000], Food [name=kimbab, price=2000]]</span>
        <span class="c1">//중복 허용되지 않았고 순서도 보장되지 않았다.</span>
	<span class="o">}</span>
<span class="o">}</span>



<span class="kd">class</span> <span class="nc">Food</span><span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Food</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
		<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"Food [name="</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">", price="</span> <span class="o">+</span> <span class="n">price</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">price</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span>
			<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
			<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span>
			<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="nc">Food</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Food</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
		<span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">other</span><span class="o">.</span><span class="na">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">price</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">price</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>생성자를 통해 들어온 값이 같다면 같은 hashCode 값을 반환해준다.</li>
  <li>객체의 내용과 타입이 같다면 true를 반환한다.</li>
</ul>

<p><br /></p>

<h2 id="hashmap">HashMap</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map.Entry</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashMapTest</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">intStrMap</span> <span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;();</span>
		<span class="c1">// 키를 정수로 밸류를 스트링 타입으로 가지는 HashMap 생성</span>
		<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">strMap</span> <span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="c1">// new 뒤의 제너릭에는 타입 생략 가능, 컴파일러가 채워줌</span>
		<span class="c1">// 키와 밸류 모두 스트링 타입을 가지는 HashMap 생성</span>
		<span class="n">strMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"NUM001"</span><span class="o">,</span> <span class="s">"Lee"</span><span class="o">);</span>
		<span class="n">strMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"NUM002"</span><span class="o">,</span> <span class="s">"Kim"</span><span class="o">);</span>
		<span class="n">strMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"NUM003"</span><span class="o">,</span> <span class="s">"Park"</span><span class="o">);</span>
		<span class="n">strMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"NUM004"</span><span class="o">,</span> <span class="s">"Jung"</span><span class="o">);</span> <span class="c1">//데이터 입력</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"NUM002"</span><span class="o">));</span> <span class="c1">//데이터 검색 //Kim</span>
		
		<span class="n">strMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"NUM004"</span><span class="o">,</span> <span class="s">"Kang"</span><span class="o">);</span> <span class="c1">//데이터 중복</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"NUM004"</span><span class="o">));</span> <span class="c1">//키는 유일한 값이고 중복되면 덮어쓴다. //Kang</span>
		
		<span class="n">strMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">"NUM004"</span><span class="o">);</span> <span class="c1">//데이터 제거</span>
		
        <span class="c1">//key, valuse 출력하기</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strMap</span><span class="o">);</span>
        <span class="c1">//{NUM001=Lee, NUM003=Park, NUM002=Kim}</span>
        
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"entrySet 이용 "</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">strMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
		    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Key : "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">"  Value : "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"keySet 이용 "</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">strMap</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span> 
        <span class="c1">//저장된 key값과 해당 value 값 출력</span>
			    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Key : "</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">" Value : "</span><span class="o">+</span> <span class="n">strMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
			<span class="o">}</span>	
            
        <span class="c1">//entrySet, keySet</span>
        <span class="c1">//Key : NUM001 Value : Lee</span>
		<span class="c1">//Key : NUM003 Value : Park</span>
		<span class="c1">//Key : NUM002 Value : Kim</span>
            
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Values 이용"</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span> <span class="o">:</span> <span class="n">strMap</span><span class="o">.</span><span class="na">values</span><span class="o">()){</span> <span class="c1">//value 만  출력</span>
		    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Values : "</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
		<span class="o">}</span>	
       
        <span class="c1">//Values 이용</span>
		<span class="c1">//Values : Lee</span>
		<span class="c1">//Values : Park</span>
		<span class="c1">//Values : Kim</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Map 인터페이스를 구현한 컬렉션</li>
  <li>Key(키), Value(밸류) 형태로 데이터를 저장하고 관리한다.</li>
  <li>쌍으로 관리되며 리스트 두 개를 세로로 붙여놓은 형태이다.</li>
  <li>Key 값이 중복을 인정하지 않고 중복하게 입력되면 덮어쓰기 된다.</li>
  <li>put(key, value) : 데이터 입력</li>
  <li>get(key) : 데이터 검색</li>
  <li>remove(key) : 데이터 제거</li>
  <li>clear() : 모든 데이터 제거</li>
  <li>데이터 출력하기
    <blockquote>
      <ul>
        <li>그냥 출력하면</li>
        <li>entrySet은 key, value 모두 필요할 때 사용한다.</li>
        <li>keySet과 get(key) 을 이용한 방법은 key를 이용해 value를 찾는 과정에서 시간이 많이 소요된다.</li>
      </ul>
    </blockquote>
  </li>
  <li>물론 value에 new를 이용해 인스턴스 객체를 생성해 넣을 수 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Food</span><span class="o">&gt;</span> <span class="n">foodMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
	<span class="n">foodMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"NUM001"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Food</span><span class="o">(</span><span class="s">"ttukbbokki"</span><span class="o">,</span> <span class="mi">8000</span><span class="o">));</span>
</code></pre></div></div>

<p><br /></p>
<h3 id="hashtable">HashTable</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Hashtable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashtableTest</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">strTable</span> <span class="o">=</span><span class="k">new</span> <span class="nc">Hashtable</span><span class="o">&lt;&gt;();</span>    
    
    
    <span class="n">strTable</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"NUM001"</span><span class="o">,</span> <span class="s">"Lee"</span><span class="o">);</span> 
    <span class="n">strTable</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"NUM002"</span><span class="o">,</span> <span class="s">"Kim"</span><span class="o">);</span> <span class="c1">//데이터 입력</span>
    <span class="n">strTable</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">"NUM002"</span><span class="o">);</span>  <span class="c1">//데이터 삭제</span>
    
    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">strtable</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span> 
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Key : "</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">", Value : "</span><span class="o">+</span> <span class="n">strtable</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
            <span class="c1">//저장된 key값과 해당 value 값 출력   </span>
            <span class="c1">//Key : NUM001, Value : Lee</span>
    <span class="o">}</span>
<span class="o">}</span>   
</code></pre></div></div>

<ul>
  <li>HashMap과 사용방법과 구조가 거의 같다.</li>
  <li>Hashtable은 key, value에  Null이 들어갈 수 없다.</li>
  <li>Hashtable은 동기화를 지원하여 thread-safe하다.(multi-thread 상황에서 shared resource에 대해 순서를 기다린다.)</li>
  <li>Hashtable은 구형 자료구조이므로 multi-thread 상황에서는 ConcurrentHashMap 사용을 권고한다.(HashMap은 단일 쓰레드 상황에서만 사용이 가능하다.)</li>
</ul>

<p><br /></p>

<p>Reference:</p>
<ul>
  <li><a href="https://www.crebugs.com/product/view.php?idx=7382&amp;code=1412">java img_크레벅스</a></li>
  <li><a href="https://gangnam-americano.tistory.com/41">collection img _Dev.GA</a></li>
  <li><a href="https://coding-factory.tistory.com/551">[Java] 자바 ArrayList 사용법 &amp; 예제 총정리_ 코딩팩토리</a></li>
  <li><a href="https://reakwon.tistory.com/83">[JAVA] HASHSET개념과 자세한 사용방법, 예제_reakwon</a></li>
  <li><a href="https://coding-factory.tistory.com/556">[Java] 자바 HashMap 사용법 &amp; 예제 총정리_코딩팩토리</a></li>
  <li><a href="https://odol87.tistory.com/3">[JAVA] HashMap과 HashTable 차이_Odol87</a></li>
</ul>
:ET